<?php
/**
 * @file
 * Scald Gallery plupload is a Scald Atom Provider for image galleries.
 */

/**
 * Implements hook_theme().
 */
function scald_gallery_plupload_theme() {
  return array(
    'scald_gallery_plupload' => array(
      'variables' => array(
        'atom' => NULL,
        'images' => array(),
        'options' => array(),
      ),
      'template' => 'scald_gallery_plupload',
    ),
  );
}

/**
 * Implements hook_library().
 */
function scald_gallery_plupload_library() {
  $path = drupal_get_path('module', 'scald_gallery_plupload');
  $libraries = array(
    'gallery_pl' => array(
      'title' => 'Scald Gallery plupload',
      'version' => '1.0',
      'js' => array(
        $path . '/scald_gallery_plupload.js' => array(),
      ),
      'css' => array(
        $path . '/scald_gallery_plupload.css' => array(
          'type' => 'file',
          'media' => 'screen',
        ),
      ),
    ),
  );

  // Add gallery specific modal settings. The atom dialog should be as large as possible.
  $libraries['gallery_pl']['js'][] = array(
    'type' => 'setting',
    'data' => array(
      'scald_gallery_plupload' => array(
        'modalSize' => array(
          'type' => 'scale',
          'width' => .9,
          'height' => .9,
          'addWidth' => 20,
          'addHeight' => 15,
        ),
        'modalOptions' => array(
          'opacity' => .5,
          'background-color' => '#000',
        ),
        'animation' => 'fadeIn',
        'modalTheme' => 'CToolsSampleModal',
        'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'ctools_ajax_sample'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_library_alter().
 */
function scald_gallery_plupload_library_alter(&$libraries, $module) {
  if ($module == 'dnd') {
    $libraries['library']['dependencies'][] = array('scald_gallery_plupload', 'gallery_pl');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function scald_gallery_plupload_form_scald_atom_add_form_options_alter(&$form, &$form_state) {
  // Add extra stuffs to Gallery form.
  $atom = isset($form_state['scald']['atom']) ? $form_state['scald']['atom'] : $form_state['scald']['atoms'][0];
  if ($atom->provider !== 'scald_gallery_plupload') {
    return;
  }

  // Add the original submit handlers to the form state for us to use later.
  $form_state['original_submit_handlers'] = $form['#submit'];
  $form['#submit'] = array('scald_gallery_plupload_submit_items');

  // Don't expose the temporary 'Save' button until we find a better way to
  // trigger it.
  // $form['buttons']['save'] = array('#type' => 'submit', '#value' => 'Save');
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function scald_gallery_plupload_field_widget_atom_reference_textfield_form_alter(&$element, &$form_state, $context) {
  // Only alter gallery field gallery_items_pl.
  if (!isset($context['form']['#entity'])) {
    return;
  }
  if ($context['instance']['entity_type'] !== 'scald_atom') {
    return;
  }
  $atom = $context['form']['#entity'];
  if ($atom->type !== 'gallery_pl' || $atom->provider !== 'scald_gallery_plupload') {
    return;
  }

  if ($context['delta'] >= count($context['items'])) {
    // New empty element.
    $data = array(
      'title_overriden' => 0,
      'title' => '',
      'description' => '',
    );
  }
  else {
    $data = $atom->data['items'][$context['items'][$context['delta']]['sid']];
  }

  $element['title_overriden'] = array(
    '#title' => t('Override this atom title'),
    '#type' => 'checkbox',
    '#default_value' => $data['title_overriden'],
    '#weight' => 20,
  );
  $element['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => $data['title'],
    '#states' => array(
      'visible' => array(
        ':input[name="atom0[gallery_items_pl][und][' . $context['delta'] .'][title_overriden]"]' => array('checked' => TRUE),
      ),
    ),
    '#size' => 90,
    '#maxlength' => 255,
    '#weight' => 21,
  );
  $element['description'] = array(
    '#title' => t('Description'),
    '#type' => 'textarea',
    '#default_value' => $data['description'],
    '#maxlength' => 255,
    '#rows' => 2,
    '#weight' => 22,
  );
}

/**
 * Special form submit handler to temporarily save a gallery atom.
 *
 * Save the current form into object cache so that it could be restored later.
 * It also updates the gallery data with items title and description.
 */
function scald_gallery_plupload_submit_items(&$form, &$form_state) {
  if (empty($form_state['scald']['atoms'])) {
    return;
  }

  $atoms = $form_state['scald']['atoms'];
  $atom = reset($atoms);
  
  //var_dump($form_state);
  
  // Save extra gallery items title and description.
  $atom->data['items'] = array();
  $i = count($form_state['values']['atom0']['gallery_items_pl'][LANGUAGE_NONE]);
  foreach ($form_state['values']['file'] as $key => $tmp_file) {
    $atom_to_add = scald_gallery_plupload_create_atom_from_file($tmp_file);
    if ($atom_to_add != null) {
      $form_state['values']['atom0']['gallery_items_pl'][LANGUAGE_NONE][] = array(
        'sid' => $atom_to_add->sid,
        '_weight' => $i,
        'title_overriden' => 0,
        'title' => "",
        'description' => "",
      );
    }
    $i++;
  }
  
  foreach ($form_state['values']['atom0']['gallery_items_pl'][LANGUAGE_NONE] as $input) {
    if (empty($input['sid'])) {
      continue;
    }
    $atom->data['items'][$input['sid']] = array(
      'title_overriden' => $input['title_overriden'],
      'title' => $input['title'],
      'description' => $input['description'],
    );
  }

  // Go back to the original handlers if it was not the special 'Save' button
  // used for temporary save.
  if ($form_state['values']['op'] !== t('Save')) {
    $form['#submit'] = $form_state['original_submit_handlers'];
    form_execute_handlers('submit', $form, $form_state);
    return;
  }

  // Build the atom, but not save it.
  entity_form_submit_build_entity('scald_atom', $atom, $form['atom0'], $form_state);
  $atom->title = $form_state['values']['atom0']['title'];

  // Create a fake saved atom
  ctools_include('object-cache');
  ctools_object_cache_set('scald_atom', 'edit:-1', array('atoms' => array($atom)));
}

function scald_gallery_plupload_create_atom_from_file($uploaded_file){
  if (!isset($uploaded_file['tmppath']) || !isset($uploaded_file['name'])) {
    return null;
  }
  $scheme = variable_get('file_default_scheme', 'public') . '://';
  
  $source = $uploaded_file['tmppath'];
  $destination = file_stream_wrapper_uri_normalize($scheme . $uploaded_file['name']);
  // Rename it to its original name, and put it in its final home.
  // Note - not using file_move here because if we call file_get_mime
  // (in file_uri_to_object) while it has a .tmp extension, it horks.
  $destination = file_unmanaged_move($source, $destination, FILE_EXISTS_RENAME);
  $file = plupload_file_uri_to_object($destination);
  $file_pointer = file_save($file);
  
  if (!$file_pointer) {
    return null; 
  }
  
  $atom = new scaldAtom('image', 'scald_image');
  $atom->title = $file_pointer->filename;         // @see scald_file.module
  $atom->base_id = $file_pointer->fid;                                // @see scald_file.module
  $atom->description = NULL;
  $atom->format = NULL;
  $atom->publisher = NULL;
  $atom->scald_thumbnail["und"][0] = (array) $file_pointer;  
  
  scald_image_scald_fetch($atom, 'atom');
  $sid = scald_atom_save($atom);
  return $atom;
}

/**
 * Implements hook_scald_atom_providers().
 */
function scald_gallery_plupload_scald_atom_providers() {
  return array(
    'gallery_pl' => 'Gallery items upload with plupload'
  );
  // This code will never be hit, but is necessary to mark the string
  // for translation on localize.d.o
  t('Gallery items upload with plupload');
}

/**
 * Implements hook_scald_add_form().
 */
function scald_gallery_plupload_scald_add_form(&$form, &$form_state) {
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Gallery title'),
    '#required' => TRUE,
  );
}

function scald_gallery_plupload_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "scald_atom_add_form_options"){    
    $form['file'] = array(
      '#type' => scald_atom_defaults('image')->upload_type,
      '#title' => t('Image'),
      '#upload_location' => ScaldAtomController::getThumbnailPath('image'),
      '#upload_validators' => array('file_validate_extensions' => array('jpg jpeg png gif')),
    );
  }
}

/**
 * Implements hook_scald_add_form_fill().
 */
function scald_gallery_plupload_scald_add_form_fill($atom, $form, $form_state) {
  $atom->title = $form_state['values']['title'];
}


/**
 * Implements hook_scald_register_atom().
 */
function scald_gallery_plupload_scald_register_atom($atom, $mode) {
  scald_gallery_plupload_update_gallery_thumbnail($atom);
}

/**
 * Implements hook_scald_update_atom().
 */
function scald_gallery_plupload_scald_update_atom($atom, $mode) {
  scald_gallery_plupload_update_gallery_thumbnail($atom);
}

/**
 * Updates the gallery thumbnail.
 *
 * If the thumbnail field is empty, use the first item thumbnail as the gallery
 * thumbnail.
 */
function scald_gallery_plupload_update_gallery_thumbnail($atom) {
  if (!field_get_items('scald_atom', $atom, 'scald_thumbnail') && ($items = field_get_items('scald_atom', $atom, 'gallery_items_pl'))) {
    foreach ($items as $item) {
      $item_atom = scald_atom_load($item['sid']);
      if (field_get_items('scald_atom', $item_atom, 'scald_thumbnail')) {
        $atom->scald_thumbnail = $item_atom->scald_thumbnail;
        break;
      }
    }
  }
}

/**
 * Implements hook_scald_fetch().
 */
function scald_gallery_plupload_scald_fetch($atom, $type) {
  $items = field_get_items('scald_atom', $atom, 'scald_thumbnail');
  if ($items && file_exists($items[0]['uri'])) {
    $atom->file_source = $atom->thumbnail_source = $items[0]['uri'];
  }
}

